{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '../_models';\nimport * as i0 from \"@angular/core\";\nconst usersKey = 'angular-11-crud-example-users';\nconst usersJSON = localStorage.getItem(usersKey);\nlet users = usersJSON ? JSON.parse(usersJSON) : [{\n  id: 1,\n  firstName: 'Joe',\n  lastName: 'Bloggs',\n  email: 'joe@bloggs.com',\n  role: Role.Inicial,\n  password: 'joe123'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return handleRoute();\n\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n            return getUserById();\n\n          case url.endsWith('/users') && method === 'POST':\n            return createUser();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n            return updateUser();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n\n      function getUsers() {\n        return ok(users.map(x => basicDetails(x)));\n      }\n\n      function getUserById() {\n        const user = users.find(x => x.id === idFromUrl());\n        return ok(basicDetails(user));\n      }\n\n      function createUser() {\n        const user = body;\n\n        if (users.find(x => x.email === user.email)) {\n          return error(`Este usuario: ${user.email} ya existe`);\n        } // assign user id and a few other properties then save\n\n\n        user.id = newUserId();\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n\n      function updateUser() {\n        let params = body;\n        let user = users.find(x => x.id === idFromUrl());\n\n        if (params.email !== user.email && users.find(x => x.email === params.email)) {\n          return error(`Este usuario: ${user.email} ya existe`);\n        } // only update password if entered\n\n\n        if (!params.password) {\n          delete params.password;\n        } // update and save user\n\n\n        Object.assign(user, params);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n\n      function deleteUser() {\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      } // helper functions\n\n\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);\n      }\n\n      function basicDetails(user) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role\n        } = user;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role\n        };\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n\n      function newUserId() {\n        return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n      }\n    }\n\n  }\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}