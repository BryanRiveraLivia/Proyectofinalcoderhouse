{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '../_helpers';\nlet AddEditComponent = class AddEditComponent {\n  constructor(formBuilder, route, router, lessonService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.lessonService = lessonService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id; // password not required in edit mode\n\n    const passwordValidators = [Validators.minLength(6)];\n\n    if (this.isAddMode) {\n      passwordValidators.push(Validators.required);\n    }\n\n    const formOptions = {\n      validators: MustMatch('password', 'confirmPassword')\n    };\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      role: ['', Validators.required],\n      password: ['', [Validators.minLength(6), this.isAddMode ? Validators.required : Validators.nullValidator]],\n      confirmPassword: ['', this.isAddMode ? Validators.required : Validators.nullValidator]\n    }, formOptions);\n\n    if (!this.isAddMode) {\n      this.userService.getById(this.id).pipe(first()).subscribe(x => this.form.patchValue(x));\n    }\n  } // convenience getter for easy access to form fields\n\n\n  get f() {\n    return this.form.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true; // reset alerts on submit\n\n    this.alertService.clear(); // stop here if form is invalid\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n\n    if (this.isAddMode) {\n      this.createUser();\n    } else {\n      this.updateUser();\n    }\n  }\n\n  createUser() {\n    this.userService.create(this.form.value).pipe(first()).subscribe(() => {\n      this.alertService.success('Alumno registrado', {\n        keepAfterRouteChange: true\n      });\n      this.router.navigate(['../'], {\n        relativeTo: this.route\n      });\n    }).add(() => this.loading = false);\n  }\n\n  updateUser() {\n    this.userService.update(this.id, this.form.value).pipe(first()).subscribe(() => {\n      this.alertService.success('Alumno actualizado', {\n        keepAfterRouteChange: true\n      });\n      this.router.navigate(['../../'], {\n        relativeTo: this.route\n      });\n    }).add(() => this.loading = false);\n  }\n\n};\nAddEditComponent = __decorate([Component({\n  templateUrl: 'add-edit.component.html'\n})], AddEditComponent);\nexport { AddEditComponent };","map":null,"metadata":{},"sourceType":"module"}