{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\"; // array in local storage for registered lessons\n\nconst lessonsKey = 'ProyFinalCoderHouseLessons';\nconst lessonsJSON = localStorage.getItem(lessonsKey);\nlet lessons = lessonsJSON ? JSON.parse(lessonsJSON) : [{\n  id: 1,\n  clase: 'Formularios reactivos',\n  descripcion: 'Aprende a desarrollador formularios dinámicos con Angular',\n  curso: 'Angular'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return handleRoute();\n\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/lessons') && method === 'GET':\n            return getLessons();\n\n          case url.match(/\\/lessons\\/\\d+$/) && method === 'GET':\n            return getLessonById();\n\n          case url.endsWith('/lessons') && method === 'POST':\n            return createLesson();\n\n          case url.match(/\\/lessons\\/\\d+$/) && method === 'PUT':\n            return updateLesson();\n\n          case url.match(/\\/lessons\\/\\d+$/) && method === 'DELETE':\n            return deleteLesson();\n\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      } // route functions\n\n\n      function getLessons() {\n        return ok(lessons.map(x => basicDetails(x)));\n      }\n\n      function getLessonById() {\n        const lesson = lessons.find(x => x.id === idFromUrl());\n        return ok(basicDetails(lesson));\n      }\n\n      function createLesson() {\n        const lesson = body;\n\n        if (lessons.find(x => x.clase === lesson.clase)) {\n          return error(`Lesson with the curso ${lesson.clase} already exists`);\n        } // assign lesson id and a few other properties then save\n\n\n        lesson.id = newLessonId();\n        lessons.push(lesson);\n        localStorage.setItem(lessonsKey, JSON.stringify(lessons));\n        return ok();\n      }\n\n      function updateLesson() {\n        let params = body;\n        let lesson = lessons.find(x => x.id === idFromUrl());\n\n        if (params.curso !== lesson.curso && lessons.find(x => x.curso === params.curso)) {\n          return error(`Lesson with the curso ${params.curso} already exists`);\n        } // update and save lesson\n\n\n        Object.assign(lesson, params);\n        localStorage.setItem(lessonsKey, JSON.stringify(lessons));\n        return ok();\n      }\n\n      function deleteLesson() {\n        lessons = lessons.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(lessonsKey, JSON.stringify(lessons));\n        return ok();\n      } // helper functions\n\n\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);\n      }\n\n      function basicDetails(lesson) {\n        const {\n          id,\n          clase,\n          descripcion,\n          curso\n        } = lesson;\n        return {\n          id,\n          clase,\n          descripcion,\n          curso\n        };\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n\n      function newLessonId() {\n        return lessons.length ? Math.max(...lessons.map(x => x.id)) + 1 : 1;\n      }\n    }\n\n  }\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}